import numpy as np

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö
dx = 1e-5
MAX_ITERS = 50_000


def derivative(f, x, h=dx):
    """
    –ß–∏—Å–ª–µ–Ω–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π —Å –ø–æ–º–æ—â—å—é –∫–æ–Ω–µ—á–Ω—ã—Ö —Ä–∞–∑–Ω–æ—Å—Ç–µ–π.
    :param f: —Ñ—É–Ω–∫—Ü–∏—è, –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—É—é –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç—å
    :param x: —Ç–æ—á–∫–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è
    :param h: —à–∞–≥ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π
    :return: –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π –≤ —Ç–æ—á–∫–µ x
    """
    return (f(x + h) - f(x)) / h


def check_convergence_simple_iteration(f, left, right):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–µ—Ç–æ–¥–∞ –ø—Ä–æ—Å—Ç–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ.
    :param f: —Ñ—É–Ω–∫—Ü–∏—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –∏—â–µ–º –∫–æ—Ä–µ–Ω—å
    :param left: –ª–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    :param right: –ø—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    :return: True –µ—Å–ª–∏ –º–µ—Ç–æ–¥ —Å—Ö–æ–¥–∏—Ç—Å—è, False –µ—Å–ª–∏ –Ω–µ—Ç
    """
    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ
    max_derivative = max(abs(derivative(f, left)), abs(derivative(f, right)))

    if max_derivative >= 1:
        print(f"–£—Å–ª–æ–≤–∏–µ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: |f'(x)| >= 1 –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ [{left}, {right}]")
        return False

    print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ: {max_derivative}")
    return True


def simple_iteration_method(f, phi, left, right, epsilon, decimal_places, log=False):
    """
    –†–µ—à–µ–Ω–∏–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–º –ø—Ä–æ—Å—Ç–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏.
    :param f: —Ñ—É–Ω–∫—Ü–∏—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –∏—â–µ–º –∫–æ—Ä–µ–Ω—å
    :param phi: —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è x = phi(x)
    :param left: –ª–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    :param right: –ø—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    :param epsilon: —Ç–æ—á–Ω–æ—Å—Ç—å
    :param decimal_places: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    :param log: —Ñ–ª–∞–≥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    :return: –æ–±—ä–µ–∫—Ç Result —Å –∫–æ—Ä–Ω–µ–º, –∑–Ω–∞—á–µ–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –∫–æ—Ä–Ω–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏—Ç–µ—Ä–∞—Ü–∏–π
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–µ—Ç–æ–¥–∞
    if not check_convergence_simple_iteration(f, left, right):
        return None

    # –ò—Ç–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
    x = (left + right) / 2  # –ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ
    iteration = 0

    while True:
        iteration += 1
        x_prev = x
        x = phi(x)  # –°–ª–µ–¥—É—é—â–µ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ

        if log:
            print(f'{iteration}: xk = {x_prev:.4f}, f(xk) = {f(x_prev)}, '
                  f'xk+1 = ùúë(ùë•ùëò) = {x:.4f}, |xk - xk+1| = {abs(x - x_prev):}')

        # –£—Å–ª–æ–≤–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if abs(x - x_prev) <= epsilon and abs(f(x)) <= epsilon:
            break

        if iteration >= MAX_ITERS:
            print(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π {MAX_ITERS}")
            break

    return Result(x, f(x), iteration, decimal_places)
